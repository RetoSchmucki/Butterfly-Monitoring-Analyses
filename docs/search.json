[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Butterfly Monitoring and Analyses",
    "section": "",
    "text": "Preface\nThis project aims to collate documentation of methods used to analyze and work with Butterfly Monitoring Schemes (BMS) data. We focus on methods used to analyze count data associated with Pollard transects that represent the core of the eBMS database.\n\nNOTE - this book project is a work in progress that only started.\nReto Schmucki, July 2024",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Butterfly_monitoring.html",
    "href": "Butterfly_monitoring.html",
    "title": "Butterfly Monitoring",
    "section": "",
    "text": "Content under construction",
    "crumbs": [
      "Counting Butterflies",
      "Butterfly Monitoring"
    ]
  },
  {
    "objectID": "data_analyses_methods.html",
    "href": "data_analyses_methods.html",
    "title": "Data Analyses and Methods",
    "section": "",
    "text": "Data Generation processes and biases\nThere are several methods for extracting information from monitoring data, and each method is based on a set of assumptions. A fundamental assumption for any monitoring program is that the data are only representative of the sampled population. Depending on how the data are collected, the sample may accurately represent the population of interest, or it may be biased and provide only a skewed representation of the population. It is important to understand how the specific sampling protocol may affect the representativeness of the data and what potential biases should be considered when analyzing the data. To develop robust monitoring methods and analyze the incoming data appropriately, it is important to understand the data generation process and how the monitoring protocol may affect the data and the information it contains. The life cycle of butterflies, for example, influences the number of adult individuals in a particular place at a particular time. The seasonality of the emergence process leads to a temporal pattern in the observed and recorded data and it is important to be aware of this systematic component when analyzing the data. Systematic variations can also be associated with variations in the sampling effort such as in the area sampled, the time spent recording or the experience of the recorders. Understanding the influence of both the biological and sampling components on the data generation process that produced the observed dataset is crucial for conceptualizing and developing methods that can disentangle the component of interest while accounting for the systematic structures in the data.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "data_analyses_methods.html#data-simulation",
    "href": "data_analyses_methods.html#data-simulation",
    "title": "Data Analyses and Methods",
    "section": "Data Simulation",
    "text": "Data Simulation\nTo better understand the influence of species biology and sampling protocols on data generation, we will rely on data simulation approaches. Data simulation involves generating random data sets based on certain rules and known parameters. It is useful not only to show how certain processes affect a dataset and create systematic patterns, but also to test methods and gain a better understanding of how they work and where they may fail.\nWhen carefully designed, data simulations can be a powerful tool for testing and validating methods as well as performing sensitivity analyzes to assess their robustness to violations of underlying assumptions. Simulated data sets enable the exploration of model behavior and help to identify their strengths and limitations. In the following sections, we will use data simulations to illustrate and explore the different components of butterfly monitoring data when generated under different scenarios. Using these simulations, we will demonstrate the modeling process and the type of information that can be extracted from the different approaches used to analyze butterfly count data.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "data_analyses_methods.html#statistical-modelling",
    "href": "data_analyses_methods.html#statistical-modelling",
    "title": "Data Analyses and Methods",
    "section": "Statistical Modelling",
    "text": "Statistical Modelling",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "data_analyses_methods.html#from-counts-to-models",
    "href": "data_analyses_methods.html#from-counts-to-models",
    "title": "Data Analyses and Methods",
    "section": "From Counts to Models",
    "text": "From Counts to Models",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "butterfly_counts.html",
    "href": "butterfly_counts.html",
    "title": "Butterfly Counts",
    "section": "",
    "text": "Simulation of Butterfly Counts\nTo demonstrate and assess the method used to compute butterfly abundance indices and the Grassland Butterfly Indicator which involves calculating collated abundance indices from multiple sites and estimating the population trend from a set of indicator species, the best option is to use simulated datasets that provide realistic data with known parameters. The simulation approach allows us to assess the methods’ performance and enables us to control individual parameters and conduct rigorous sensitivity analysis. This will provide useful insight into the method and enable rigorous assessment of its power and limitations.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#simulation-of-butterfly-counts",
    "href": "butterfly_counts.html#simulation-of-butterfly-counts",
    "title": "Butterfly Counts",
    "section": "",
    "text": "Simulation Tool for Butterflies and Other Phenologies\nTo simulate butterfly count across sites and over multiple iterations, we will use the function developed by Collin Edwards and available in the R packages butterflyGamSims.\n\nif(!require(\"data.table\")) install.packages(\"data.table\")\nif(!require(\"ggplot2\")) install.packages(\"ggplot2\")\nif(!require(\"devtools\")) install.packages(\"devtools\")\nif(!require(\"rbms\")) devtools::install_github(\"RetoSchmucki/rbms\")\nif(!require(\"butterflyGamSims\")) devtools::install_github(\"cbedwards/butterflyGamSims\")\n\nflc_col &lt;- 'orange'\ncnt_col &lt;- 'darkcyan'\nmissing_col &lt;- 'red'\nGAM_col &lt;- '#483d8b'\n\nIn the first case, we will simulate counts for one site for one year, using a Gaussian curve to depict the adult butterflies’ seasonal phenology (activity curve). The daily counts are generated from a random Poisson process.\n\nbtfl_data &lt;- timeseries_sim(nsims=1,\n               year = c(2023:2025),\n               doy.samples = seq(from=1, to=365, by=1),\n               abund.type = \"exp\",\n               activity.type = \"gauss\",\n               sample.type = \"pois\",\n               sim.parms = list(growth.rate = 0,\n                                init.size = 500, \n                                act.mean = 175,\n                                act.sd = 15)\n               )",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#simulate-data-sampling-process",
    "href": "butterfly_counts.html#simulate-data-sampling-process",
    "title": "Butterfly Counts",
    "section": "Simulate Data Sampling Process",
    "text": "Simulate Data Sampling Process\n\n# data: Time series resulting from the simulation generated for 365 days\n# weeklySample: TRUE or FALSE; should the daily count in the time series be resampled weekly?\n# weekdayKeep: vector of days c(1,2,..., 7) to be sampled from for the weekly count. If the vector\n# contains c(2,3,4), the sampling process will be restricted to Tuesday, Wednesday or Thursday.\n# monitoringSeason: vector of months that define the monitoring season (e.g. April to September is c(4:9)). \n\nsim2bms &lt;- function(data, yearKeep = NULL, weeklySample = FALSE, weekdayKeep = NULL, monitoringSeason = NULL){\n                  \n                  btfl_ts &lt;- data.table::data.table(data)[, site_id := paste0(\"site_\",sim.id)]\n                  if(!is.null(yearKeep)){\n                        btfl_ts &lt;- btfl_ts[years %in% yearKeep, ]\n                  }\n                  btfl_ts[ , date := as.Date(doy, origin = paste0(years, \"-01-01\"))-1]\n                  btfl_ts[ , week := isoweek(date)]\n                  btfl_ts[month(date) != 1 | week &lt; 50, weekday := rowid(week), by = .(site_id, years)]\n                  if(isTRUE(weeklySample)){\n                        if(!is.null(weekdayKeep)){\n                              btfl_ts &lt;- btfl_ts[weekday %in% weekdayKeep, ]\n                        }\n                        btfl_ts &lt;- btfl_ts[btfl_ts[,.I[sample(.N, 1)], by = .(week, site_id, years)][[\"V1\"]],]\n                  }\n                  if(!is.null(monitoringSeason)){\n                  btfl_ts &lt;- btfl_ts[month(date) %in% monitoringSeason, ]\n                  }\n            return(btfl_ts)\n            }\n\n\ny &lt;- c(2023)\n\nbtfl_ts &lt;- sim2bms(data = btfl_data$timeseries, yearKeep = y)\n\nbtfl_fig &lt;- ggplot() +\n                geom_point(data=btfl_ts, aes(x=doy, y=count, colour = \"count\")) + \n                geom_line(data = btfl_ts,\n                aes(x = doy, y = act, colour = \"activity\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$count, btfl_ts$act)) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\"),\n                      values = c(cnt_col, flc_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- daily visit\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig\n\n\n\n\n\n\n\n\nIn the example above, the activity curve represented by the line has a Gaussian shape and counts presented by the points along the curve are independent random samples from a Poisson distribution. Because we sampled a count value for 365 days (day-of-year; doy), the counts are representative of the population of active adult butterflies as if the site was visited every. This implies that a proportion of butterflies are counted more than one day as their lifespan exceeds one day. On Pollard transect, this is how butterfly counts are likely to be counted and reported, but with a different frequency as visits are generally weekly, fortnightly, or even monthly. We can replicate this value by resampling the daily count weekly.\n\nset.seed(13276)\n\nbtfl_week_smpl &lt;- sim2bms(data = btfl_data$timeseries, yearKeep = y, \n                  weeklySample = TRUE,\n                  weekdayKeep = c(2:5),\n                  monitoringSeason = c(4:9))\n\nbtfl_fig2 &lt;- ggplot() +\n                geom_point(data=btfl_week_smpl, aes(x=doy, y=count, colour = \"count\")) + \n                geom_line(data = btfl_ts,\n                aes(x = doy, y = act, colour = \"activity\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$count, btfl_ts$act)) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\"),\n                      values = c(cnt_col, flc_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- weekly visit (random resampled)\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig2\n\n\n\n\n\n\n\n\nFrom the weekly visits, counts outside of the monitoring period will not be informed, in many cases these are ‘zeros’ as we expect the monitoring season to align with butterflies’ activity. Some other weeks might be missing from the time series, potentially due to unsuitable weather conditions for monitoring or recorder’s unavailability. We can include these missing visits by resampling a subset of the weekly counts.\n\nmissing_prob &lt;- function(data, mu=NULL, alpha = 5, theta = 0.3){\n                              x_ &lt;- seq_len(nrow(data))\n                              mu_ &lt;- ifelse(is.null(mu), length(x_) / 2, mu)\n                              std_ &lt;- sqrt(mu_ / theta)\n                              y_ &lt;- abs((alpha * exp((-(x_ - mu_)^2) / std_^2)) - alpha) + alpha\n                              yn_ &lt;- y_ / (sum(y_))\n                        return(yn_)\n                  }\n\nsample_missing &lt;- function(data, propMissing = 0.25){\n            \n            missing.prob &lt;- data.table::data.table()\n            for(i in data[, unique(years)]){\n                  for(j in data[, unique(site_id)]){\n                  missing.prob &lt;- rbind(missing.prob, missing_prob(data[years == i & site_id == j, ]))\n                  }\n            }\n            \n            missing.week &lt;- data[sample(seq_len(.N), round(propMissing * .N), prob = unlist(missing.prob)), ]  \n      \n      return(missing.week)\n}\n\nbtfl_week_missing &lt;- sample_missing(data = btfl_week_smpl, propMissing = 0.25)\n\nbtfl_fig3 &lt;- ggplot() +\n                geom_point(data=btfl_week_smpl, aes(x=doy, y=count, colour = \"count\")) + \n                geom_point(data=btfl_week_missing, aes(x=doy, y=count, colour = \"missing\"), \n                            shape=4, size=2, stroke=2) + \n                geom_line(data = btfl_ts,\n                aes(x = doy, y = act, colour = \"activity\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$count, btfl_ts$act)) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\", \"missing\"),\n                      values = c(cnt_col, flc_col, missing_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- weekly visit (random resampled)\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig3",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#generalized-additive-models-with-rbms",
    "href": "butterfly_counts.html#generalized-additive-models-with-rbms",
    "title": "Butterfly Counts",
    "section": "Generalized Additive Models with rbms",
    "text": "Generalized Additive Models with rbms\nWe will use the simulation to test the GAM method implemented in the R package rbms. Because recorders only report the number of observed butterflies, zeros are generally not reported but can be derived from the visit dates.\n\nOrganising BMS count data\n\nvisit_sim &lt;- btfl_week_smpl[!date %in% btfl_week_missing$date, .(site_id, date, count)]\ncount_sim &lt;- visit_sim[count&gt;=1,][, species := \"sp1\"]\n\nnames(visit_sim) &lt;- toupper(names(visit_sim))\nnames(count_sim) &lt;- toupper(names(count_sim))\n\nts_date &lt;- rbms::ts_dwmy_table(InitYear = 2023, LastYear = 2023, WeekDay1 = 'monday')\n\nts_season &lt;- rbms::ts_monit_season(ts_date,\n                       StartMonth = 4,\n                       EndMonth = 9, \n                       StartDay = 1,\n                       EndDay = NULL,\n                       CompltSeason = TRUE,\n                       Anchor = TRUE,\n                       AnchorLength = 2,\n                       AnchorLag = 2,\n                       TimeUnit = 'd')\n\nts_season_visit &lt;- rbms::ts_monit_site(ts_season, visit_sim)\n\nts_season_count &lt;- rbms::ts_monit_count_site(ts_season_visit, count_sim, sp = \"sp1\")\n\n\n\nFitting a GAM to Butterfly Counts\n\nts_flight_curve &lt;- rbms::flight_curve(ts_season_count, \n                       NbrSample = 300,\n                       MinVisit = 5,\n                       MinOccur = 3,\n                       MinNbrSite = 1,\n                       MaxTrial = 4,\n                       GamFamily = 'nb',\n                       SpeedGam = FALSE,\n                       CompltSeason = TRUE,\n                       SelectYear = NULL,\n                       TimeUnit = 'd')\n\nThe flight curve computed by the rbms::flight_curve() function is stored in the …$pheno object where the days of year are stored under the variable trimDAYNO and the standardized flight curve under the variable NM. The NM variable is scaled to an Area Under the Curve (AUC) that sum to 1. To compare the flight curve derived from the GAM with the activity curve used for the simulation, we must rescale them to the same AUC, in other words, we must rescale the activity curve to have an AUC of 1 or rescale the NM to the population size used for the simulation. Here we will rescale the NM to match the simulation population size, this will allow us to display the curves and the counts on the same plot with the correct scale.\n\npheno &lt;- ts_flight_curve$pheno\n\nbtfl_fig4 &lt;- ggplot() +\n                geom_point(data=ts_season_count[ANCHOR == 0 & !is.na(COUNT), ], aes(x=DAY_SINCE, y=COUNT, colour = \"count\")) +\n                geom_point(data=btfl_week_missing, aes(x=doy, y=count, colour = \"missing\"), \n                            shape=4, size=2, stroke=2) + \n                geom_line(data = btfl_ts, aes(x = doy, y = act, colour = \"activity\")) +\n                geom_line(data = pheno,\n                    aes(x = trimDAYNO, y = btfl_ts[,unique(abund.true)]*NM, colour = \"GAM_fit\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$act, \n                                          pheno$NM*btfl_ts[,unique(abund.true)], \n                                          btfl_week_missing$count, \n                                          ts_season_count[!is.na(COUNT), COUNT] )) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\", \"missing\", \"GAM_fit\"),\n                      values = c(cnt_col, flc_col, missing_col, GAM_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- Fitting GAM model with rbms\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig4\n\n\n\n\n\n\n\n\nTo compare the fitted curve with the activity curve, we should use a standard AUC of 1 to enable a fair comparison between models fitted to different population sizes. Using the standardized activity curve and the GAM-generated flight curve (NM), we can calculate the Root Mean Squared Error (RMSE) to estimate the goodness of fit of the flight curve generated with the rbms package.\n\\[\n   RMSE = \\sqrt{\\frac{1}{n}\\sum_{i=1}^n \\left( y_i - \\tilde{y}_i\\right)}\n\\]",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#non-gaussian-flight-curve",
    "href": "butterfly_counts.html#non-gaussian-flight-curve",
    "title": "Butterfly Counts",
    "section": "Non Gaussian flight curve",
    "text": "Non Gaussian flight curve\nThe same procedure can be applied to flight curves having more complex shapes. Here we will generate a time series of butterfly counts drawn from a known flight curve (adult activity), using simulation from a Zonneveld model.\n\nbtfl_data_zn &lt;- timeseries_sim(nsims=1,\n               year = c(2023),\n               doy.samples = seq(from=1, to=365, by=1),\n               abund.type = \"exp\",\n               activity.type = \"zon\",\n               sample.type = \"pois\",\n               sim.parms = list(growth.rate = 0,\n                                init.size = 500, \n                                act.mean = 175,\n                                act.sd = 15,\n                                #theta = 5,\n                                zon.theta = 50,\n                                t0 = 100,\n                                beta = 5,\n                                alpha = 0.05)\n               )\n\n\nset.seed(13276)\nbtfl_ts &lt;- sim2bms(data = btfl_data_zn$timeseries, yearKeep = y)\n\nbtfl_week_smpl &lt;- sim2bms(data = btfl_data_zn$timeseries, yearKeep = y, \n                  weeklySample = TRUE,\n                  weekdayKeep = c(2:5),\n                  monitoringSeason = c(4:9))\n\nbtfl_week_missing &lt;- sample_missing(data = btfl_week_smpl, propMissing = 0.25)\n\nvisit_sim &lt;- btfl_week_smpl[!date %in% btfl_week_missing$date, .(site_id, date, count)]\ncount_sim &lt;- visit_sim[count&gt;=1,][, species := \"sp1\"]\n\nnames(visit_sim) &lt;- toupper(names(visit_sim))\nnames(count_sim) &lt;- toupper(names(count_sim))\n\nts_date &lt;- rbms::ts_dwmy_table(InitYear = 2023, LastYear = 2023, WeekDay1 = 'monday')\n\nts_season &lt;- rbms::ts_monit_season(ts_date,\n                       StartMonth = 4,\n                       EndMonth = 9, \n                       StartDay = 1,\n                       EndDay = NULL,\n                       CompltSeason = TRUE,\n                       Anchor = TRUE,\n                       AnchorLength = 2,\n                       AnchorLag = 2,\n                       TimeUnit = 'd')\n\nts_season_visit &lt;- rbms::ts_monit_site(ts_season, visit_sim)\n\nts_season_count &lt;- rbms::ts_monit_count_site(ts_season_visit, count_sim, sp = \"sp1\")\n\n# mod_k &lt;- \"COUNT ~ s(DAY_SINCE, bs =\\\"cr\\\", k = 5) + factor(SITE_ID)\"\n\nts_flight_curve &lt;- rbms::flight_curve(ts_season_count, \n                       NbrSample = 300,\n                       MinVisit = 5,\n                       MinOccur = 3,\n                       MinNbrSite = 1,\n                       MaxTrial = 4,\n                       GamFamily = 'nb',\n                       SpeedGam = FALSE,\n                       CompltSeason = TRUE,\n                       SelectYear = NULL,\n                       #mod_form = mod_k,\n                       TimeUnit = 'd')\n\npheno &lt;- ts_flight_curve$pheno\n\nbtfl_fig5 &lt;- ggplot() +\n                geom_point(data=ts_season_count[ANCHOR == 0 & !is.na(COUNT), ], aes(x=DAY_SINCE, y=COUNT, colour = \"count\")) +\n                geom_point(data=btfl_week_missing, aes(x=doy, y=count, colour = \"missing\"), \n                            shape=4, size=2, stroke=2) + \n                geom_line(data = btfl_ts, aes(x = doy, y = act, colour = \"activity\")) +\n                geom_line(data = pheno, aes(x = trimDAYNO, y = btfl_ts[,unique(abund.true)]*NM, colour = \"GAM_fit\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$act, \n                                          pheno$NM*btfl_ts[,unique(abund.true)], \n                                          btfl_week_missing$count, \n                                          ts_season_count[!is.na(COUNT), COUNT] )) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\", \"missing\", \"GAM_fit\"),\n                      values = c(cnt_col, flc_col, missing_col, GAM_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts - Zonneveld Model (\", y,\")\"),\n                     subtitle = \"- Fitting GAM model with rbms\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig5",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#simple-trend-case",
    "href": "butterfly_counts.html#simple-trend-case",
    "title": "Butterfly Counts",
    "section": "Simple trend case",
    "text": "Simple trend case\nIn the first scenario, we will apply the method to a simple case where we have one univoltine species that is monitored over 15 years across 100 sites where the populations follow the same trend with a known growth rate.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  }
]