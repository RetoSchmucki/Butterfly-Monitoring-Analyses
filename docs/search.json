[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Butterfly Monitoring and Analyses",
    "section": "",
    "text": "Preface\nThis project aims to collate documentation of methods used to analyze and work with Butterfly Monitoring Schemes (BMS) data. We focus on methods used to analyze count data associated with Pollard transects that represent the core of the eBMS database.\n\nNOTE - this book project is a work in progress that only started.\nReto Schmucki, July 2024",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Butterfly_monitoring.html",
    "href": "Butterfly_monitoring.html",
    "title": "Butterfly Monitoring",
    "section": "",
    "text": "Content under construction",
    "crumbs": [
      "Counting Butterflies",
      "Butterfly Monitoring"
    ]
  },
  {
    "objectID": "data_analyses_methods.html",
    "href": "data_analyses_methods.html",
    "title": "Data Analyses and Methods",
    "section": "",
    "text": "Data Generation Processes\nTo develop robust monitoring methods and analyze the incoming data appropriately, it is important to understand the processes that generate the data and how the monitoring protocol affects the nature and structure of the data. For example, the life cycle of butterflies affects the number of adult individuals that can be observed in a given location at a given time. The seasonality of the emergence process creates a temporal pattern in the observed and recorded data that must be accounted for in the analysis. Systematic variation may also result from differences in sampling effort (e.g. the area sampled, the time spent recording or the experience of the recorders).\nUnderstanding the influence of both biological and sampling components on the data generation process is crucial for the design and development of methods that can filter out the component of interest while accounting for systematic structures in the data. This also helps in assessing whether the monitoring program accurately captures and reflects the population of interest or whether the sample is biased and unrepresentative. When designing a monitoring program, it is important to identify the population to be monitored and understand how the sampling protocol may affect the representativeness of the data and introduce potential bias.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "data_analyses_methods.html#data-simulation",
    "href": "data_analyses_methods.html#data-simulation",
    "title": "Data Analyses and Methods",
    "section": "Data Simulation",
    "text": "Data Simulation\nTo better understand the influence of species biology and sampling protocols on data generation, we will use data simulation approaches. Data simulation involves generating random data sets based on defined rules and known parameters. This technique is useful not only to illustrate the outcome of ecological and sampling processes but also to test methods and improve our understanding of statistical models and their potential failures.\nWhen carefully designed, data simulation is a powerful tool for testing and validating methods and performing sensitivity analyses to assess their robustness to violations of underlying assumptions. Simulated data sets allow for exploring systematic patterns in the data and evaluating the behavior of models to identify their strengths and limitations.\nIn the following sections, we will use data simulations to illustrate and explore the different components of butterfly monitoring data generated under different scenarios. Through these simulations, we aim to 1) gain a deeper understanding of the data structure resulting from the ecological and sampling processes involved in butterfly monitoring schemes, 2) demonstrate and compare different modeling approaches and 3) understand the information that can be derived from these approaches.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "data_analyses_methods.html#statistical-modelling",
    "href": "data_analyses_methods.html#statistical-modelling",
    "title": "Data Analyses and Methods",
    "section": "Statistical Modelling",
    "text": "Statistical Modelling",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "data_analyses_methods.html#from-counts-to-models",
    "href": "data_analyses_methods.html#from-counts-to-models",
    "title": "Data Analyses and Methods",
    "section": "From Counts to Models",
    "text": "From Counts to Models",
    "crumbs": [
      "From Counts to FLight Curves",
      "Data Analyses and Methods"
    ]
  },
  {
    "objectID": "butterfly_counts.html",
    "href": "butterfly_counts.html",
    "title": "Butterfly Counts",
    "section": "",
    "text": "Simulation of Butterfly Counts\nWe will use simulated data to demonstrate and evaluate methods for calculating butterfly abundance indices, population trends and multi-species indicators such as the European Grassland Butterfly Indicator. To achieve this, we need to generate realistic data sets with known parameters. Data simulation will allow us to apply and test the methods on data generated under different scenarios. This approach will enable rigorous sensitivity analysis and provide crucial insights into the methods and a deeper understanding of their performance and limitations.\nCode\nif(!require(\"data.table\")) install.packages(\"data.table\")\nif(!require(\"ggplot2\")) install.packages(\"ggplot2\")\nif(!require(\"devtools\")) install.packages(\"devtools\")\nif(!require(\"rbms\")) devtools::install_github(\"RetoSchmucki/rbms\")\n\nflc_col &lt;- '#ff8c00'\ncnt_col &lt;- '#008b8b'\nmissing_col &lt;- '#8b0000'\nGAM_col &lt;- '#483d8b'",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#simulation-of-butterfly-counts",
    "href": "butterfly_counts.html#simulation-of-butterfly-counts",
    "title": "Butterfly Counts",
    "section": "",
    "text": "Simulation Tool for Butterflies and Other Phenologies\nBecause butterflies’ life cycle is strongly structured in time, with species-specific phenologies, we must account for this ecological process when simulating individual counts recorded across an entire season. The temporal pattern in the number of adult butterflies (imago) is determined by their emergence rate, the timing of the emergence and the life span of the adult. These parameters will often result in the number of adult individuals increasing over a certain period, up to a peak after when their number starts to decline. If a species can produce more than one generation per season, the number will display additional waves of emergence, each with its respective start, peak and decline periods. For each generation, the hump-shaped temporal pattern in the number of adults can often be described by a function that has a mean (center), variance (width) and a certain level of skewness (asymmetry). When merged, the individual patterns can become hidden under the pattern resulting from the cumulative effect of partly overlapping generations.\nTo simulate butterfly count data with such phenological patterns, we will use the function timeseries_sim() from the R package butterflyGamSims developed by Collin Edwards (see Edwards et al. 2023). This package is freely available on GitHub and will allow us to generate realistic data sets under scenarios with various levels of complexity.\nWe illustrate how the timeseries_sim() function works with a simple case where we simulate butterfly counts for a univoltine species with a Gaussian pattern (i.e. one generation with Normal distribution), where the peak abundance is observed at day 175 with a standard deviation of 15 days.\n\n\nCode\nset.seed(13276)\n\nif(!require(\"butterflyGamSims\")) devtools::install_github(\"cbedwards/butterflyGamSims\")\n\nbtfl_data &lt;- timeseries_sim(nsims=1,\n               year = c(2023),\n               doy.samples = seq(from=1, to=365, by=1),\n               abund.type = \"exp\",\n               activity.type = \"gauss\",\n               sample.type = \"pois\",\n               sim.parms = list(growth.rate = 0,\n                                init.size = 500, \n                                act.mean = 175,\n                                act.sd = 15)\n               )\n\n\nThe object produced by the timeseries_sim() function contains 1) a data.frame NAME$timeseries with the time series and 2) a data.frame NAME$parms with the parameters used for the simulation. In the parameters, you will find the population growth rate (growth.rate), the initial population size (init. size) measure in number of individuals expected over the season, the peak of the activity curve (act.mean) measured in days and the width of the activity curve (act.sd) that is measured in standard deviation.\n\n\n\n\n\n\nNote\n\n\n\nNote that not all sampling parameters used for the simulation are included in the parms object; the activity.type (the distribution function used to define the activity curve), the sample.type (the sampling process used to sample random counts along the activity curve) and the abund.type (the type of the growth rate, deterministic or with a log-normal process error) are missing.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#simulate-data-sampling-process",
    "href": "butterfly_counts.html#simulate-data-sampling-process",
    "title": "Butterfly Counts",
    "section": "Simulate Data Sampling Process",
    "text": "Simulate Data Sampling Process\nWith the timeseries_sim() function above, we simulated a regular time series of butterfly counts where the actual number of active butterfly of each day are draw from a Poisson distribution with a given expectation defined by the activity curve along a day-of-year vector \\(j\\) following the probability density of a normal distribution (Gaussian) with mean equal to the peak day \\(\\mu\\) (act.mean) and a standard deviation \\(\\alpha\\) (act.sd). Because the integral of the probability density distribution (area under the curve) sum to 1, we can multiply the density by the abundance to retrieve a vector of expected abundance for each day-of-year, \\(\\lambda_j\\).\n\\[\n\\lambda_j = abundance * \\frac{1}{\\alpha \\sqrt{2 \\pi}} \\exp \\left(- \\frac{1}{2} \\left( \\frac{\\left(j - \\mu\\right)}{\\alpha}\\right)^2\\right)\n\\]\nFrom the activity curve, we can use the rpois() function in R to draw a random value from a Poisson distribution, \\(y_i\\) representing the count for day \\(j\\), where the mean is specified by expected value \\(\\lambda\\) at day \\(j\\).\n\\[\ny_j = rpois(\\lambda_j)\n\\]\nFrom this simulation, we have generated the ecological process for the butterfly counts, for a given abundance distributed over a specific phenology defined by a Gaussian curve with a peak (mean) and a breath (standard deviation).\n\n\nCode\nlibrary(knitr)\nkable(btfl_data$timeseries[c(1:3,160:163,250:253),])\n\n\n\nButterfly Simmulation Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyears\ndoy\ncount\nact\nabund.true\nonset.true\nmedian.true\nend.true\nfp.true\nsim.id\n\n\n\n\n1\n2023\n1\n0\n0.0000000\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n2\n2023\n2\n0\n0.0000000\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n3\n2023\n3\n0\n0.0000000\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n160\n2023\n160\n9\n8.0656908\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n161\n2023\n161\n11\n8.6025942\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n162\n2023\n162\n10\n9.1345489\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n163\n2023\n163\n5\n9.6563851\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n250\n2023\n250\n0\n0.0000496\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n251\n2023\n251\n0\n0.0000354\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n252\n2023\n252\n0\n0.0000252\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n253\n2023\n253\n0\n0.0000179\n500\n155.8\n175\n194.2\n38.4\n1\n\n\n\n\n\n\nThe additional structure resulting from the monitoring protocol (observation process) can now be added to the simulated time series and replicate a specific protocol. In this first case, we will simulate a protocol with weekly visits and include some missing counts for weeks when the minimal monitoring conditions were not met or the observer was absent. For this, we will write some new R functions. The first function will define the start and end of the monitoring season and sample one monitoring day per week over the season. Then we will write functions to simulate a certain level of missing weekly visits within the season. The likelihood of missing weeks tends to be higher at the beginning and the end of the season and lower in the middle. Let’s start with the first function that defines the monitoring season and resamples one day of the simulated time series every week. We will name the function sim2bms() as it aligns the simulated time series to the protocol of a specific Butterfly Monitoring Scheme (BMS). The function needs the time series, and additional arguments to define the year that we want to extract yearKeep, if the time series must be resampled weekly weeklySample, which day should be used for the weekly resampling weekdayKeep (this can be a vector of days, e.g. c(2,3,4,5), or a specific day), and finally the monitoring season monitoringSeason which correspond to a vector of months, e.g c(4,5,6,7,8,9) represent a season starting in April and ending in September. Note that this function will also add some new variables such as the date, the ISO week number and the day of the week.\n\n\nCode\n# data: Time series resulting from the simulation generated for 365 days\n# weeklySample: TRUE or FALSE; should the daily count in the time series be resampled weekly?\n# weekdayKeep: vector of days c(1,2,..., 7) to be sampled from for the weekly count. If the vector\n# contains c(2,3,4), the sampling process will be restricted to Tuesday, Wednesday or Thursday.\n# monitoringSeason: vector of months that define the monitoring season (e.g. April to September is c(4:9)). \n\nsim2bms &lt;- function(data, yearKeep = NULL, weeklySample = FALSE, weekdayKeep = NULL, monitoringSeason = NULL){\n                  \n                  btfl_ts &lt;- data.table::data.table(data)[, site_id := paste0(\"site_\",sim.id)]\n                  if(!is.null(yearKeep)){\n                        btfl_ts &lt;- btfl_ts[years %in% yearKeep, ]\n                  }\n                  btfl_ts[ , date := as.Date(doy, origin = paste0(years, \"-01-01\"))-1]\n                  btfl_ts[ , week := isoweek(date)]\n                  btfl_ts[month(date) != 1 | week &lt; 50, weekday := rowid(week), by = .(site_id, years)]\n                  if(isTRUE(weeklySample)){\n                        if(!is.null(weekdayKeep)){\n                              btfl_ts &lt;- btfl_ts[weekday %in% weekdayKeep, ]\n                        }\n                        btfl_ts &lt;- btfl_ts[btfl_ts[,.I[sample(.N, 1)], by = .(week, site_id, years)][[\"V1\"]],]\n                  }\n                  if(!is.null(monitoringSeason)){\n                  btfl_ts &lt;- btfl_ts[month(date) %in% monitoringSeason, ]\n                  }\n            return(btfl_ts)\n            }\n\n\nWe can apply this function to retrieve a specific year of the simulated time series and add some new variables, leaving all other parameters empty. With the same function, we can also resample weekly counts (e.g. one day from c(2:5)) and restrict the time series to a specific monitoring season (e.g. c(4:9)).\n\nCode\nset.seed(13276)\ny &lt;- c(2023)\n\nbtfl_ts &lt;- sim2bms(data = btfl_data$timeseries, yearKeep = y)\nbtfl_fig1 &lt;- ggplot() +\n                geom_point(data=btfl_ts, aes(x=doy, y=count, colour = \"count\")) + \n                geom_line(data = btfl_ts,\n                aes(x = doy, y = act, colour = \"activity\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$count, btfl_ts$act)) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\"),\n                      values = c(cnt_col, flc_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- daily visit\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\n\nbtfl_week_smpl &lt;- sim2bms(data = btfl_data$timeseries, yearKeep = y, \n                  weeklySample = TRUE,\n                  weekdayKeep = c(2:5),\n                  monitoringSeason = c(4:9))\nbtfl_fig2 &lt;- ggplot() +\n                geom_point(data=btfl_week_smpl, aes(x=doy, y=count, colour = \"count\")) + \n                geom_line(data = btfl_ts,\n                aes(x = doy, y = act, colour = \"activity\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$count, btfl_ts$act)) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\"),\n                      values = c(cnt_col, flc_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- weekly visit (random resampled)\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\n\nbtfl_fig1\nbtfl_fig2\n\n\n\n\n\n\n\na)\n\n\n\n\n\n\n\n\n\nb)\n\n\n\n\n\nIn the example above, the activity curve represented by the line has a Gaussian shape and counts presented by the points along the curve are independent random samples from a Poisson distribution. Because we sampled a count value for 365 days (day-of-year; doy), the counts are representative of the population of active adult butterflies as if the site was visited every. This implies that a proportion of butterflies are counted more than one day as their lifespan exceeds one day. On Pollard transect, this is how butterfly counts are likely to be counted and reported, but with a different frequency as visits are generally weekly, fortnightly, or even monthly. We can replicate this value by resampling the daily count weekly.\nFrom the weekly visits, counts outside of the monitoring period will not be informed, in many cases these are ‘zeros’ as we expect the monitoring season to align with butterflies’ activity. Some other weeks might be missing from the time series, potentially due to unsuitable weather conditions for monitoring or the recorder’s availability. We can inform and exclude the missing visits by resampling a subset of the weekly counts.\n\n\nCode\nmissing_prob &lt;- function(data, mu=NULL, alpha = 5, theta = 0.3){\n                              x_ &lt;- seq_len(nrow(data))\n                              mu_ &lt;- ifelse(is.null(mu), length(x_) / 2, mu)\n                              std_ &lt;- sqrt(mu_ / theta)\n                              y_ &lt;- abs((alpha * exp((-(x_ - mu_)^2) / std_^2)) - alpha) + alpha\n                              yn_ &lt;- y_ / (sum(y_))\n                        return(yn_)\n                  }\n\nsample_missing &lt;- function(data, propMissing = 0.25){\n            \n            missing.prob &lt;- data.table::data.table()\n            for(i in data[, unique(years)]){\n                  for(j in data[, unique(site_id)]){\n                  missing.prob &lt;- rbind(missing.prob, missing_prob(data[years == i & site_id == j, ]))\n                  }\n            }\n            \n            missing.week &lt;- data[sample(seq_len(.N), round(propMissing * .N), prob = unlist(missing.prob)), ]  \n      \n      return(missing.week)\n}\n\nbtfl_week_missing &lt;- sample_missing(data = btfl_week_smpl, propMissing = 0.25)\n\nbtfl_fig3 &lt;- ggplot() +\n                geom_point(data=btfl_week_smpl, aes(x=doy, y=count, colour = \"count\")) + \n                geom_point(data=btfl_week_missing, aes(x=doy, y=count, colour = \"missing\"), \n                            shape=4, size=2, stroke=2) + \n                geom_line(data = btfl_ts,\n                aes(x = doy, y = act, colour = \"activity\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$count, btfl_ts$act)) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\", \"missing\"),\n                      values = c(cnt_col, flc_col, missing_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- weekly visit (random resampled)\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig3",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#generalized-additive-models-with-rbms",
    "href": "butterfly_counts.html#generalized-additive-models-with-rbms",
    "title": "Butterfly Counts",
    "section": "Generalized Additive Models with rbms",
    "text": "Generalized Additive Models with rbms\nWe will use the simulation to test the GAM method implemented in the R package rbms (Schmucki, Harrower A., and Dennis B. 2022). Because recorders only report the number of observed butterflies, zeros are generally not reported but can be derived from the visit dates.\n\nOrganising BMS count data\n\n\nCode\nvisit_sim &lt;- btfl_week_smpl[!date %in% btfl_week_missing$date, .(site_id, date, count)]\ncount_sim &lt;- visit_sim[count&gt;=1,][, species := \"sp1\"]\n\nnames(visit_sim) &lt;- toupper(names(visit_sim))\nnames(count_sim) &lt;- toupper(names(count_sim))\n\nts_date &lt;- rbms::ts_dwmy_table(InitYear = 2023, LastYear = 2023, WeekDay1 = 'monday')\n\nts_season &lt;- rbms::ts_monit_season(ts_date,\n                       StartMonth = 4,\n                       EndMonth = 9, \n                       StartDay = 1,\n                       EndDay = NULL,\n                       CompltSeason = TRUE,\n                       Anchor = TRUE,\n                       AnchorLength = 2,\n                       AnchorLag = 2,\n                       TimeUnit = 'd')\n\nts_season_visit &lt;- rbms::ts_monit_site(ts_season, visit_sim)\n\nts_season_count &lt;- rbms::ts_monit_count_site(ts_season_visit, count_sim, sp = \"sp1\")\n\n\n\n\nFitting a GAM to Butterfly Counts\n\n\nCode\nts_flight_curve &lt;- rbms::flight_curve(ts_season_count, \n                       NbrSample = 300,\n                       MinVisit = 5,\n                       MinOccur = 3,\n                       MinNbrSite = 1,\n                       MaxTrial = 4,\n                       GamFamily = 'nb',\n                       SpeedGam = FALSE,\n                       CompltSeason = TRUE,\n                       SelectYear = NULL,\n                       TimeUnit = 'd')\n\n\nThe flight curve computed by the rbms::flight_curve() function is stored in the …$pheno object where the days of year are stored under the variable trimDAYNO and the standardized flight curve under the variable NM. The NM variable is scaled to an Area Under the Curve (AUC) that sum to 1. To compare the flight curve derived from the GAM with the activity curve used for the simulation, we must rescale them to the same AUC, in other words, we must rescale the activity curve to have an AUC of 1 or rescale the NM to the population size used for the simulation. Here we will rescale the NM to match the simulation population size, this will allow us to display the curves and the counts on the same plot with the correct scale.\n\n\nCode\npheno &lt;- ts_flight_curve$pheno\n\nbtfl_fig4 &lt;- ggplot() +\n                geom_point(data=ts_season_count[ANCHOR == 0 & !is.na(COUNT), ], aes(x=DAY_SINCE, y=COUNT, colour = \"count\")) +\n                geom_point(data=btfl_week_missing, aes(x=doy, y=count, colour = \"missing\"), \n                            shape=4, size=2, stroke=2) + \n                geom_line(data = btfl_ts, aes(x = doy, y = act, colour = \"activity\")) +\n                geom_line(data = pheno,\n                    aes(x = trimDAYNO, y = btfl_ts[,unique(abund.true)]*NM, colour = \"GAM_fit\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$act, \n                                          pheno$NM*btfl_ts[,unique(abund.true)], \n                                          btfl_week_missing$count, \n                                          ts_season_count[!is.na(COUNT), COUNT] )) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\", \"missing\", \"GAM_fit\"),\n                      values = c(cnt_col, flc_col, missing_col, GAM_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts (\", y,\")\"),\n                     subtitle = \"- Fitting GAM model with rbms\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig4\n\n\n\n\n\n\n\n\n\nTo compare the fitted curve with the activity curve, we should use a standard AUC of 1 to enable a fair comparison between models fitted to different population sizes. Using the standardized activity curve and the GAM-generated flight curve (NM), we can calculate the Root Mean Squared Error (RMSE) to estimate the goodness of fit of the flight curve generated with the rbms package.\n\\[\n   RMSE = \\sqrt{\\frac{1}{n}\\sum_{i=1}^n \\left( y_i - \\tilde{y}_i\\right)}\n\\]\nwhere \\(y_i\\) is the NM value at time \\(i\\) and \\(\\tilde{y}_i\\) the value from the standardized activity curve at time \\(i\\), from day \\(1\\) to \\(n\\) of the monitoring season.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#non-gaussian-flight-curve",
    "href": "butterfly_counts.html#non-gaussian-flight-curve",
    "title": "Butterfly Counts",
    "section": "Non Gaussian flight curve",
    "text": "Non Gaussian flight curve\nThe same procedure can be applied to flight curves having more complex shapes. Here we will generate a time series of butterfly counts drawn from a known flight curve (adult activity), using simulation from a Zonneveld model.\n\n\nCode\nbtfl_data_zn &lt;- timeseries_sim(nsims=1,\n               year = c(2023),\n               doy.samples = seq(from=1, to=365, by=1),\n               abund.type = \"exp\",\n               activity.type = \"zon\",\n               sample.type = \"pois\",\n               sim.parms = list(growth.rate = 0,\n                                init.size = 500, \n                                act.mean = 175,\n                                act.sd = 15,\n                                #theta = 5,\n                                zon.theta = 50,\n                                t0 = 100,\n                                beta = 5,\n                                alpha = 0.05)\n               )\n\n\nset.seed(13276)\nbtfl_ts &lt;- sim2bms(data = btfl_data_zn$timeseries, yearKeep = y)\n\nbtfl_week_smpl &lt;- sim2bms(data = btfl_data_zn$timeseries, yearKeep = y, \n                  weeklySample = TRUE,\n                  weekdayKeep = c(2:5),\n                  monitoringSeason = c(4:9))\n\nbtfl_week_missing &lt;- sample_missing(data = btfl_week_smpl, propMissing = 0.25)\n\nvisit_sim &lt;- btfl_week_smpl[!date %in% btfl_week_missing$date, .(site_id, date, count)]\ncount_sim &lt;- visit_sim[count&gt;=1,][, species := \"sp1\"]\n\nnames(visit_sim) &lt;- toupper(names(visit_sim))\nnames(count_sim) &lt;- toupper(names(count_sim))\n\nts_date &lt;- rbms::ts_dwmy_table(InitYear = 2023, LastYear = 2023, WeekDay1 = 'monday')\n\nts_season &lt;- rbms::ts_monit_season(ts_date,\n                       StartMonth = 4,\n                       EndMonth = 9, \n                       StartDay = 1,\n                       EndDay = NULL,\n                       CompltSeason = TRUE,\n                       Anchor = TRUE,\n                       AnchorLength = 2,\n                       AnchorLag = 2,\n                       TimeUnit = 'd')\n\nts_season_visit &lt;- rbms::ts_monit_site(ts_season, visit_sim)\n\nts_season_count &lt;- rbms::ts_monit_count_site(ts_season_visit, count_sim, sp = \"sp1\")\n\n# mod_k &lt;- \"COUNT ~ s(DAY_SINCE, bs =\\\"cr\\\", k = 5) + factor(SITE_ID)\"\n\nts_flight_curve &lt;- rbms::flight_curve(ts_season_count, \n                       NbrSample = 300,\n                       MinVisit = 5,\n                       MinOccur = 3,\n                       MinNbrSite = 1,\n                       MaxTrial = 4,\n                       GamFamily = 'nb',\n                       SpeedGam = FALSE,\n                       CompltSeason = TRUE,\n                       SelectYear = NULL,\n                       #mod_form = mod_k,\n                       TimeUnit = 'd')\n\npheno &lt;- ts_flight_curve$pheno\n\nbtfl_fig5 &lt;- ggplot() +\n                geom_point(data=ts_season_count[ANCHOR == 0 & !is.na(COUNT), ], aes(x=DAY_SINCE, y=COUNT, colour = \"count\")) +\n                geom_point(data=btfl_week_missing, aes(x=doy, y=count, colour = \"missing\"), \n                            shape=4, size=2, stroke=2) + \n                geom_line(data = btfl_ts, aes(x = doy, y = act, colour = \"activity\")) +\n                geom_line(data = pheno, aes(x = trimDAYNO, y = btfl_ts[,unique(abund.true)]*NM, colour = \"GAM_fit\")) +\n                xlim(1,365) + ylim(0, max(btfl_ts$act, \n                                          pheno$NM*btfl_ts[,unique(abund.true)], \n                                          btfl_week_missing$count, \n                                          ts_season_count[!is.na(COUNT), COUNT] )) + \n                scale_colour_manual(\"\", \n                      breaks = c(\"count\", \"activity\", \"missing\", \"GAM_fit\"),\n                      values = c(cnt_col, flc_col, missing_col, GAM_col)) +\n                theme_light() + \n                theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.8)) +\n                labs(title = paste0(\"Simulated butterfly counts - Zonneveld Model (\", y,\")\"),\n                     subtitle = \"- Fitting GAM model with rbms\",\n                     x = \"Day of Year\",\n                     y = \"Count\")\nbtfl_fig5",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "butterfly_counts.html#simple-trend-case",
    "href": "butterfly_counts.html#simple-trend-case",
    "title": "Butterfly Counts",
    "section": "Simple trend case",
    "text": "Simple trend case\nIn the first scenario, we will apply the method to a simple case where we have one univoltine species that is monitored over 15 years across 100 sites where the populations follow the same trend with a known growth rate.\n\n\n\n\nEdwards, Collin, Cheryl Schultz, David Sinclair, Daniel Marschalek, and Elizabeth Crone. 2023. “Estimating Butterfly Population Trends from Sparse Monitoring Data Using Generalized Additive Models.” December 8, 2023. https://doi.org/10.1101/2023.12.07.570644.\n\n\nSchmucki, Reto, Colin Harrower A., and Emily Dennis B. 2022. “rbms: Computing generalised abundance indices for butterfly monitoring count data.” https://github.com/RetoSchmucki/rbms.",
    "crumbs": [
      "From Counts to FLight Curves",
      "Butterfly Counts"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Edwards, Collin, Cheryl Schultz, David Sinclair, Daniel Marschalek, and\nElizabeth Crone. 2023. “Estimating Butterfly Population Trends\nfrom Sparse Monitoring Data Using Generalized Additive\nModels.” December 8, 2023. https://doi.org/10.1101/2023.12.07.570644.\n\n\nSchmucki, Reto, Colin Harrower A., and Emily Dennis B. 2022.\n“rbms: Computing generalised abundance\nindices for butterfly monitoring count data.” https://github.com/RetoSchmucki/rbms.",
    "crumbs": [
      "Bibliography",
      "References"
    ]
  }
]